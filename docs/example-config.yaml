database:
  # Locate the database for this Limes setup with a libpq connection URI. (The
  # non-URI "connection string" format is not allowed. It must be a URI.)
  # Reference: https://www.postgresql.org/docs/9.6/static/libpq-connect.html#LIBPQ-CONNSTRING
  location: "postgres://user:pass@host:port/database"
  # Locate the directory containing the migration files for Limes' database schema. The example shows the default
  # install location. If you have not installed Limes, point this to the directory "./pkg/db/migrations" in the repo.
  migrations: "/usr/share/limes/migrations"


clusters:
  # The keys at this level are the cluster IDs. A cluster is a set of OpenStack services, i.e. one Keystone plus all the
  # services in that Keystone's service catalog. If you have only one cluster, "single" or "default" is a good choice
  # for a cluster ID. Cluster IDs can be arbitary text, but you should probably restrict yourself to /[a-z][a-z0-9-]*/
  # for sanity reasons.
  first:
    # For each cluster, give the authentication parameters that allow Limes to connect to Keystone and then to all the
    # other OpenStack services. The Limes user must have enough permissions to enumerate all domains and all projects,
    # retrieve quotas and usage data from all enabled services, and set quotas on all projects.
    auth_url:            https://keystone.local:5000/v3
    user_name:           limes
    user_domain_name:    Default
    project_name:        service
    project_domain_name: Default
    password:            swordfish
    region_name:         antarctica # only required for deployments with multiple regions
    # URL of Limes endpoint as it appears in the Keystone service catalog (this is only used for version advertisements)
    catalog_url: 'https://limes-first.example.org/'
    services:
      # For each cluster, enumerate all the services for which quotas and usages shall be managed. This list may be
      # different per cluster since clusters may have a different set of OpenStack services rolled out. Services can be
      # marked as "shared" when their capacity is shared between multiple clusters, to ensure correct capacity reporting.
      # The "type" values are the same as in `openstack service list`.
      - type: compute
      - type: network
      - type: dns
      - type: volumev2
      - type: object-store
        shared: true
  second:
    # auth params omitted for brevity, would look just like above
    catalog_url: 'https://limes-second.example.org/'
    services:
      - type: compute
      - type: network
      - type: volumev2
      - type: object-store
        shared: true
      - type: sharev2


api:
  # TCP address for limes-serve to listen on
  listen: ':8080'
  # authorization rules in oslo.policy format; see docs/example-policy.json for example
  policy: '/etc/limes/policy.json'

collector:
  # TCP address for limes-collect to serve Prometheus metrics on (on HTTP under the /metrics endpoint)
  metrics: ':8080'
  # if true, expose all quota, usage and capacity data to Prometheus as the gauges limes_{project,domain,cluster}_{capacity,quota,usage,backend_quota}
  data_metrics: True
